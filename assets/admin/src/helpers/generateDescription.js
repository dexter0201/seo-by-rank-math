/**
 * External dependencies
 */
import jQuery from 'jquery'
import { Helpers } from '@rankMath/analyzer'
import { filter, includes, isEmpty, isUndefined, truncate } from 'lodash'

/**
 * WordPress dependencies
 */
import { applyFilters } from '@wordpress/hooks'

/**
 * Internal dependencies
 */
import { swapVariables } from '@helpers/swapVariables'
import decodeEntities from '@helpers/decodeEntities'

/**
 * Truncate text for given length.
 *
 * @param {string} text   Text to truncate.
 * @param {number} length Length to truncate for.
 *
 * @return {string} Truncated text.
 */
const truncatedText = ( text, length ) => {
	text = Helpers.cleanText( text )
	text = text.replace( /\r?\n|\r/g, ' ' )
	return ! length ? text : truncate( text, { length, separator: ' ' } )
}

/**
 * Generate description from post content.
 *
 * @param {string} content Content to auto generate description from.
 *
 * @return {string} The auto-generated SEO description.
 */
const autoGenerateDescription = ( content ) => {
	if ( isEmpty( content ) ) {
		return ''
	}

	// Remove caption shortcode before sending content to the analyzer.
	content = content.replace( /\[caption[^\]]*\](.*)\[\/caption\]/g, '' )

	// 4. Paragraph with the focus keyword
	const paragraphs = filter(
		Helpers.matchParagraphs( content, true, true ),
		( paragraph ) => '' !== paragraph.trim()
	)
	if ( ! paragraphs.length ) {
		return ''
	}

	const keyword = rankMathEditor.getPrimaryKeyword()
	if ( '' !== keyword ) {
		const keywordInPara = filter( paragraphs, ( paragraph ) =>
			includes( paragraph.toLowerCase(), keyword.toLowerCase() )
		)
		if ( 0 < keywordInPara.length ) {
			return truncatedText( keywordInPara[ 0 ], 160 )
		}
	}

	// 5. The First paragraph of the content
	return truncatedText( paragraphs[ 0 ], 160 )
}

/**
 * Retrieves the SEO description set in the post metabox.
 *
 * Retrieve in this order:
 *     1. Custom meta description set for the post in SERP field
 *     2. Excerpt
 *     3. Description template set in the Titles & Meta
 *     4. Paragraph with the focus keyword
 *     5. The First paragraph of the content
 *
 * @param {string} description Description from post seo editor.
 *
 * @return {string} The SEO description for the specified object, or queried object if not supplied.
 */
export default function( description ) {
	const gutenbergData = rankMathEditor.assessor.dataCollector.getData()
	const excerpt = gutenbergData.excerpt
	const content = ! gutenbergData.content ? '' : autoGenerateDescription(
		gutenbergData.content.replace( /<script[^>]*>([\S\s]*?)<\/script>/gim, '' )
	)

	const seoDescription =
		isUndefined( excerpt ) || isEmpty( excerpt ) ? content : excerpt

	swapVariables.setVariable( 'excerpt', seoDescription )
	swapVariables.setVariable( 'seo_description', seoDescription )

	// 1. Custom meta description set for the post in SERP field
	description = decodeEntities(
		applyFilters( 'rankMath/description', description )
	)
	if ( '' !== description ) {
		return Helpers.cleanText( description )
	}

	// 2. Excerpt
	if ( ! isUndefined( excerpt ) && ! isEmpty( excerpt ) ) {
		return Helpers.cleanText( excerpt )
	}

	// 3. Description template set in the Titles & Meta
	const format = rankMath.assessor.serpData.descriptionTemplate

	return ! isUndefined( format ) && '' !== format
		? Helpers.cleanText( format )
		: content
}
